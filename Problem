○ 常用延时的集中方法

1.performSelector
[objc] view plain copy
[self performSelector:@selector(removeViews) withObject:nil afterDelay:5.0];  

这个好理解，延时调用

2.NSTimer 触发定时任务
[objc] view plain copy
NSTimer *timer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(removeViews) userInfo:nil repeats:NO];  
[timer setFireDate:[NSDate dateWithTimeIntervalSinceNow:5.0]];  

3.使用GCD
[objc] view plain copy
dispatch_time_t delayTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5.0 * NSEC_PER_SEC));  
dispatch_after(delayTime, dispatch_get_main_queue(), ^{  
              [self removeViews];  
        });  

4.NSThread  阻塞子线程
[objc] view plain copy
[NSThread sleepForTimeInterval:5];  
[self removeViews];  


○ 为什么出现页面卡顿？
在开发中我们常常会遇到布局比较复杂的cell,在滑动的时候会导致界面不流畅，出现卡顿的现象，这是由于CPU计算和GPU渲染，之间未及时交换数据丢失帧导致的结果。

常见解决办法

1.UIImageView尽量设置为不透明
opque尽量设置为YES
当UIImageView的opque设置为YES的时候其alpha的属性就会无效，UIImageView的半透明取决于其图片半透明或者UIImageView本身的背景色合成的图层view是半透明的。
如果图片全部不是半透明就不会触发图层的blend操作，整个图层就会不透明。
如果叠加的图片有出现半透明的，就会立马触发图层的blend操作，整个图层不透明。
背景色尽可能设为alpha值为1
当某一块图层的alpha和其superView的背景色alpha不一样的时候会触发alpha合成操作，这是一项看似很简单但却是非常消耗CPU性能的操作。

2.UIView的背景色设置
UIView的背景色尽量不要设置为clearColor，这样也会触发alpha叠加，在UITableView滑动的时候是非常消耗性能的。子视图的背景色尽可能设置成其superView的背景色，这样图层合成的时候不会触发blend操作。
最好不使用带alpha通道的图片，如果有alpha尽量让UI设计人员取消alpha通道。

3.cell上layer尽量避免使用圆角
在工作中关于滑动界面我们会时常遇到cell行设置头像为圆角等需求，这时候我们尽量避免使用layder.cornerRadius，因为这会触发离屏渲染。离屏渲染很耗时间。
离屏渲染：是GPU渲染区的一个渲染缓冲区，我们所用的所有显示屏的图形图像都是通过GPU进行渲染，然后显示在屏幕上。GPU负责渲染会把渲染的图形放到缓冲区然后CPU就会发一个垂直信号显示到屏幕。
如果要使用圆角，我们可以设置为layer.shouldRasterize = YES，其实这个设置是触发光栅化，可以大大提高渲染的性能。我的理解光栅化就是类似于cell的重用机制。
光栅化：把第一次渲染好的图层放到缓冲区，那么下次不需要再离屏渲染直接就可以从缓冲区拿去使用。

4.优化图片的加载方式
图片的加载方式有两种形式：
UIImageView *image = [UIImageView imageView:@"1.png"];
UIImageView *image = [UIImageView imageWithContentOfFile:@"1.png"];
两种加载图片方式的区别：
第一种：当我们经常需要这张图片并且仅仅是小图的时候，我们可以使用此种方式加载图片。
这种方式是把图片缓存在图片缓存区，当我们使用的时候会通过图片的名字也就是通过key的方式去查找图片在缓存区的内存地址。
当我们使用很多图片的时候系统就会开辟很多内存来存储图片，所以qq、微信我们很多时候都会去清除缓存操作。
第二种：当我们使用工程里面的一张大图并且使用次数很少甚至为1次的时候，我们优先会采用这种方式加载图片，这种方式当使用完图片的时候会立即丢弃释放资源，所以对性能不会带来负担。

5.尽量延迟图片的加载
当我们在滑动页面的时候尤其对于那种布局特别复杂的cell，滑动的时候不要加载图片，当滑动停止得时候再进行图片的加载。
我们都知道不管是UITableView还是UIScrollView在滚动的时候需要显示东西都是通过runLoop去拿。
当滚动的时候runLoop会处于NSRunLoopTrackingMode的模式，我们可以通过一个主线程队列dispatch_after或者selfPerformSelector设置runLoop的模式为NSDefaultRunLoopMode模式，就可以做到停止滚动再加载图片。
注：其实严格意义上selfPerformSelector的事件就是在主线程队列中等待。
优先加载理念
采用优先加载的理念，既先展示一部分，当滑动的时候再加载下面的一部分这样就保持流畅。

6.避免阻塞主线程
让图片的绘制、图片的下载、对象的创建、文本的渲染等这些耗时的操作尽可能采用子线程异步的方式去处理，对于layer及UI的操作不得不在主线程里面，只能想办法优化。

7.xib、storyBoard、纯代码的问题
苹果推出storyboard确实为开发者节省了大量的时间，提高了开发效率，但是对于那种
复杂的滑动界面，利用storyboard是非常消耗资源的，不信的可以试试用性能工具timeProfie看看CPU所占的性能百分比，其CPU的资源远远大于纯代码布局。